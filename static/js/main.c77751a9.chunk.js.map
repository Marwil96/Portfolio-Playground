{"version":3,"sources":["components/Card.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Card","data","this","props","shadow","react_default","a","createElement","className","style","marginTop","margin","href","url","title","subHeader","medium","Component","defaultOptions","loop","autoplay","animationData","require","rendererSettings","preserveAspectRatio","App","state","startViewState","projectViewState","x","y","isStopped","isPaused","projects","setState","loading","setTimeout","bind","titletext","window","innerWidth","shadowAtt","onClick","changeState","map","components_Card","e","screenX","screenY","textShadow","console","log","height","innerHeight","width","onMouseMove","_onMouseMove","startView","projectView","dist_default","options","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.c77751a9.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport '../App.css';\n\nclass Card extends Component {\n  render() {\n   var data = this.props.data;\n   var shadow = this.props.shadow;\n    return (\n     <a className=\"card\" style={{marginTop:data.margin}} href={data.url}>\n        <h2>{data.title} </h2>\n        <h3>{data.subHeader} </h3>\n        <h4>Visit {data.medium} </h4>\n      </a>\n    );\n  }\n}\n\nexport default Card;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Lottie from 'react-lottie';\nimport Card from './components/Card.js';\n\nconst defaultOptions = {\n      loop: true,\n      autoplay: true, \n      animationData: require('./img/data.json'),\n      rendererSettings: {\n        preserveAspectRatio: 'xMidYMid slice'\n      }\n    };\n\nclass App extends Component {\n  state = {\n    startViewState: \"titleText titleTextNotAnimated\",\n    projectViewState: \"titleText projectTitleText\",\n    x: 0, y: 0,\n    isStopped: false, \n    isPaused: false,\n    projects: [\n    {title:\"Booking system\", subHeader:\"Bookingsystem for barbershops. Built with react and usertested with HotJar.\", url: \"https://marwil96.github.io/barberBooking/\", medium:\"Website\"},\n    {title:\"Lyric search\", subHeader:\"Search for lyrics and get an report on how positive the text is. Built with react, lottie, musixmatch api.\", url: \"https://marwil96.github.io/Lyricdisplay/\", margin:\"64px\", medium:\"Website\"},\n    {title:\"Learning Vue\", subHeader:\"Learning Vue by building a gifsearcher. Built with Vue and giphys api.\", url: \"https://github.com/Marwil96/GifSearchVue\", margin:\"-32px\", medium:\"Github\"},\n    {title: \"Phases \\n of \\n Starvation\", subHeader:\"Made this concept design while learning Flinto.\", url: \"https://www.behance.net/gallery/58864945/Concept-Site-The-Phases-of-Starvation\", medium:\"Behance\"},\n    ]\n  }\n\n  changeState() {\n    this.setState({\n      startViewState: \"titleText titleTextAnimated\",\n      loading:true\n    })\n    setTimeout(\n    function() {\n        this.setState({\n          loading: false,\n          projectViewState: \"titleText projectTitleText titleTextNotAnimated\",\n        });\n      }\n      .bind(this),\n        2000\n    );\n  }\n\n  renderOctopus() {\n    return(\n      null\n      )\n  }\n\n  startView() {\n    var width = (window.innerWidth);\n    var titletext = \"Playground\"\n    if(width < 880) {\n       titletext = \"Play-ground\"\n    } else {\n      titletext = \"Playground\"\n    }\n    return(\n      <div className={this.state.startViewState}>\n          <h1 style={this.state.shadowAtt}> {titletext} </h1>\n          <h3> Here is every side project i either work on or have finished. </h3>\n          <div className=\"button\" onClick={this.changeState.bind(this)}> <h1 className=\"buttonText\"> Look at em! </h1> </div>\n        </div>  \n      )\n  }\n   projectView() {\n    return(\n      <div className={this.state.projectViewState}>\n          <h1 style={this.state.shadowAtt}> Playground </h1>\n          <div className=\"cardContainer\">\n          { this.state.projects.map(data =>{\n           return <Card data={data} />\n          })}\n          </div>\n        </div>  \n      )\n  }\n    _onMouseMove(e) {\n    this.setState({ x: (e.screenX/50), y: (e.screenY/50), shadowAtt:{textShadow:\"#F44336 \" + (e.screenX/50) +\"px \" + (e.screenY/50) + \"px\" + \" 0px\"} });\n    console.log(e, e.screenX, e.screenY,{textShadow:\"#F44336 \" + (e.screenX/50) +\"px \" + (e.screenY/50) + \"px\" + \" 0px\"})\n  }\n  render() {\n    var height = (window.innerHeight/100) * 100;\n    var width = (window.innerWidth/100) * 100;\n    return (\n      <div className=\"App\" onMouseMove={this._onMouseMove.bind(this)}>\n        {this.startView()}\n        {this.projectView()}\n        {this.state.loading ? (\n        <div className=\"animationContainer\">\n        <Lottie options={defaultOptions}\n              height={height}\n              width={width}\n              isStopped={this.state.isStopped}\n              isPaused={this.state.isPaused}/>\n        </div> ) :(null) }\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}